# (Для закрепления предыдущего материала).
# Вводится таблица целых чисел (см. пример ниже) размером N x N элементов (N определяется по входным данным).
# Эта таблица содержит нули, но кое-где - единицы. С помощью функции с именем verify, на вход которой передается двумерный список чисел,
# необходимо проверить, являются ли единицы изолированными друг от друга, то есть, вокруг каждой единицы должны быть нули.
# Рекомендуется следующий алгоритм.
# В функции verify производить перебор двумерного списка.
# Для каждого элемента (списка) со значением 1 вызывать еще одну вспомогательную функцию is_isolate для проверки изолированности единицы.
# То есть, функция is_isolate должна возвращать True, если единица изолирована и False - в противном случае.
# Как только встречается не изолированная единица, функция verify должна возвращать False.
# Если успешно доходим (по элементам списка) до конца, то возвращается значение True.
# Функцию выполнять не нужно, только определить.
# P. S. При реализации функции is_isolate не следует прописывать восемь операторов if.
# Подумайте, как это можно сделать красивее (с точки зрения реализации алгоритма).
# Sample Input:
# 1 0 0 0 0
# 0 0 1 0 0
# 0 0 0 0 0
# 0 1 0 1 0
# 0 0 0 0 0
# Sample Output:
# True

def is_isolate(lst, i, j):
    if lst[i][j] + lst[i][j + 1] + lst[i + 1][j] + lst[i + 1][j + 1] >= 2:
        return False
    else:
        return True


def verify(lst):
    s = []
    for i in range(len(lst) - 1):
        for j in range(len(lst) - 1):
            if lst[i][j] == 1:
                is_isolate(lst, i, j)
                if is_isolate(lst, i, j) == False:
                    s.append(lst[i][j])
            else:
                continue

    if len(s) == 0:
        return True
    else:
        return False